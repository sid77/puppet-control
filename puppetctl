#!/bin/bash
#
# An apachectl-style script to control a cron scheduled puppet instance
#
# Return codes:
#  + 0, everything's fine
#  + 1, something went wrong, look for WARNINGs or ERRORs
#
# Written by Marco Bonetti <marco.bonetti@slackware.it>
#

set -e

# Read default values
if [ -r /etc/default/puppetctl ]; then
  . /etc/default/puppetctl
fi

# Global variables
LOCKFILE=${LOCKFILE:-"$(puppet agent --genconfig | \
  grep puppetdlockfile | \
  cut -d "=" -f 2 | \
  sed -e 's:^\ ::g')"}
PIDFILE=${PIDILE:-"$(puppet agent --genconfig | \
  grep pidfile | \
  cut -d "=" -f 2 | \
  sed -e 's:^\ ::g')"}

#
# running: check if written pid is running or not
# parameters: none
#
running() {
  if [ -r ${LOCKFILE} ]; then
    ps -p $(cat ${LOCKFILE} 2>> /dev/null) >> /dev/null 2>&1 ; echo $?
  elif [ -r ${PIDFILE} ]; then
    ps -p $(cat ${PIDFILE} 2>> /dev/null) >> /dev/null 2>&1 ; echo $?
  else
    echo 1
  fi
}

#
# display_lock: display lock message
# parameters: none
#
display_lock() {
  if [ -f ${LOCKFILE} ]; then
    echo "Lock message: \"`cat ${LOCKFILE}`\""
  else
    echo "ERROR: missing lock file!"
    exit 1
  fi
}

#
# enable: enable disabled puppet instance
# parameters: none
#
enable() {
  # check if already running
  if [ "`running`" = "0" ]; then
      echo "Puppet is currently running"
  else
    # enable instance
    echo "Enabling puppet instance"
    rm -f ${LOCKFILE}
    rm -f ${PIDFILE}
    puppet agent --enable
  fi
}

#
# disable: disable puppet instance if not already done
# parameters: "-m", optional lock message
#
disable() {
  LOCKMSG="Locked by: $(who -s | grep -m 1 $(ps --no-headers -p$$ -o tname=))"
  if [ "$1" = "-m" -o "$1" = "--message" ]; then
      LOCKMSG="$2"
  fi
  if [ -z "${LOCKMSG}" ]; then
    echo "ERROR: empty lock message"
    exit 1
  fi
  # Check and write lock
  if [ -f ${LOCKFILE} ]; then
    echo "Lock file already present"
    display_lock
  else
    echo "Disabling puppet instance"
    echo "${LOCKMSG}" > ${LOCKFILE}
  fi
}

#
# report: if instance is locked, mail current lock message
# parameters: mail address
#
report() {
  MAILTO=""
  if [ "$1" = "-t" -o "$1" = "--to" ]; then
    MAILTO="$2"
  fi
  if [ -z "{MAILTO}" ]; then
    echo "ERROR: empty lock message"
    exit 1
  fi
  # check lock file
  if [ -f ${LOCKFILE} ]; then
    LOCKMSG=`cat ${LOCKFILE}`
    if [ -z "${LOCKMSG}" ]; then
      LOCKMSG="WARNING: empty lock file on `hostname -f`"
    fi
    # send mail
    echo "Puppet lock file present, sending email"
    echo "${LOCKMSG}" | mail -s "Puppet disabled on `hostname -f`" "${MAILTO}"
  else
    # puppet is enabled, nothing to do
    echo "Puppet is enabled"
  fi
}

#
# run: start a single puppet run
# parameters: any supported puppet agent parameter
#
run() {
  OPTIONS="-t $@"
  puppet agent ${OPTIONS}
}

#
# lockedrun: start a single puppet run, locking it after the run completes
# parameters: any supported puppet agent parameter
#
lockedrun() {
  # save lock message, if any
  LOSCKEDRUNMSG=""
  if [ -f "${LOCKFILE}" ]; then
    LOSCKEDRUNMSG=$(cat "${LOCKFILE}")
  fi
  enable
  # run with "|| true" so it locks even after troubles
  run "$@" || true
  if [ ! -z "${LOSCKEDRUNMSG}" ]; then
    disable "${LOSCKEDRUNMSG}"
  else
    disable
  fi
}

#
# status: display puppet instance status
# parameters: none
#
status() {
  echo -n "Puppet instance is "
  if [ -f ${LOCKFILE} ]; then
    echo "locked"
    display_lock
  else
    echo "enabled"
  fi
}

#
# usage: display program usage
# parameters: none
#
usage() {
  echo -e "Puppet control usage:"
  echo -e "\t$0 [enable|disable|report|run|lockedrun|status] [command options]"
  echo -e "Available command options:"
  echo -e "\tdisable [-m|--message] message"
  echo -e "\treport [-t|--to] user@example.com"
  echo -e "\trun [any puppet agent options]"
  echo -e "\tlockedrun [any puppet agent options]"
}

# check root
if [ ! "${EUID}" = "0" ]; then
  echo "You need root privileges to run $0"
  exit 1
fi

case "$1" in
'enable')
  enable
  ;;
'disable')
  shift 1
  disable "$@"
  ;;
'report')
  shift 1
  report "$@"
  ;;
'run')
  shift 1
  run "$@"
  ;;
'lockedrun')
  shift 1
  lockedrun "$@"
  ;;
'status')
  status
  ;;
*)
  usage
  ;;
esac

exit 0
